#
# Filters added to this controller apply to all controllers in Blacklight
# Likewise, all the methods added will be available for all controllers.
#
class BlacklightController < ActionController::Base

#  before_filter :default_html_head # add JS/stylesheet stuff
  # now in application.rb file under config.filter_parameters
  # filter_parameter_logging :password, :password_confirmation 
  helper_method :current_user_session, :current_user
  after_filter :discard_flash_if_xhr

  # handle basic authorization exception with #access_denied
  rescue_from Blacklight::Exceptions::AccessDenied, :with => :access_denied

  def user_class; User; end

  helper_method [:request_is_for_user_resource?]#, :user_logged_in?]
  #before_filter [:set_current_user, :restrict_user_access]

  # See ActionController::RequestForgeryProtection for details
  # Uncomment the :secret if you're not using the cookie session store
  protect_from_forgery # :secret => '200c1e5f25e610288439b479ef176bbd'

  layout :choose_layout

  # test for exception notifier plugin
  def error
    raise RuntimeError, "Generating a test error..."
  end

  protected

    # Returns a list of Searches from the ids in the user's history.
    def searches_from_history
      session[:history].blank? ? [] : Search.find(session[:history]) rescue []
    end

    #
    # Controller and view helper for determining if the current url is a request for a user resource
    #
    def request_is_for_user_resource?
      request.env['PATH_INFO'] =~ /\/?users\/?/
    end

    #
    # If a param[:no_layout] is set OR
    # request.env['HTTP_X_REQUESTED_WITH']=='XMLHttpRequest'
    # don't use a layout, otherwise use the "application.html.erb" layout
    #
    def choose_layout
      'blacklight' unless request.xml_http_request? || ! params[:no_layout].blank?
    end

    def current_user_session
      puts "DEPRICATED:  Please use Devise, Authlogic or other authentication system."
      user_session  # method provided by devise
    end

    # Should be provided by devise
    # def current_user
    # end
    
    ##
    # We discard flash messages generated by the xhr requests to avoid
    # confusing UX.
    def discard_flash_if_xhr
      flash.discard if request.xhr?
    end

    ##
    # To handle failed authorization attempts, redirect the user to the 
    # login form and persist the current request uri as a parameter
    def access_denied
      # send the user home if the access was previously denied by the same
      # request to avoid sending the user back to the login page
      #   (e.g. protected page -> logout -> returned to protected page -> home)
      redirect_to root_url and flash.discard and return if request.referer and request.referer.ends_with? request.fullpath

      redirect_to new_user_session_url(:referer => request.fullpath)
    end

end

